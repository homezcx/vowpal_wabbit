// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OUTCOMEEVENT_VW_EVENTS_H_
#define FLATBUFFERS_GENERATED_OUTCOMEEVENT_VW_EVENTS_H_

#include "flatbuffers/flatbuffers.h"

namespace VW {
namespace Events {

struct OutcomeEvent;

struct OutcomeEventBatch;

struct OutcomeEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENTID = 4,
    VT_V = 6
  };
  const flatbuffers::String *EventId() const {
    return GetPointer<const flatbuffers::String *>(VT_EVENTID);
  }
  const flatbuffers::String *v() const {
    return GetPointer<const flatbuffers::String *>(VT_V);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTID) &&
           verifier.VerifyString(EventId()) &&
           VerifyOffset(verifier, VT_V) &&
           verifier.VerifyString(v()) &&
           verifier.EndTable();
  }
};

struct OutcomeEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_EventId(flatbuffers::Offset<flatbuffers::String> EventId) {
    fbb_.AddOffset(OutcomeEvent::VT_EVENTID, EventId);
  }
  void add_v(flatbuffers::Offset<flatbuffers::String> v) {
    fbb_.AddOffset(OutcomeEvent::VT_V, v);
  }
  explicit OutcomeEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OutcomeEventBuilder &operator=(const OutcomeEventBuilder &);
  flatbuffers::Offset<OutcomeEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OutcomeEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<OutcomeEvent> CreateOutcomeEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> EventId = 0,
    flatbuffers::Offset<flatbuffers::String> v = 0) {
  OutcomeEventBuilder builder_(_fbb);
  builder_.add_v(v);
  builder_.add_EventId(EventId);
  return builder_.Finish();
}

inline flatbuffers::Offset<OutcomeEvent> CreateOutcomeEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *EventId = nullptr,
    const char *v = nullptr) {
  return VW::Events::CreateOutcomeEvent(
      _fbb,
      EventId ? _fbb.CreateString(EventId) : 0,
      v ? _fbb.CreateString(v) : 0);
}

struct OutcomeEventBatch FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<OutcomeEvent>> *Events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<OutcomeEvent>> *>(VT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.VerifyVector(Events()) &&
           verifier.VerifyVectorOfTables(Events()) &&
           verifier.EndTable();
  }
};

struct OutcomeEventBatchBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_Events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OutcomeEvent>>> Events) {
    fbb_.AddOffset(OutcomeEventBatch::VT_EVENTS, Events);
  }
  explicit OutcomeEventBatchBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OutcomeEventBatchBuilder &operator=(const OutcomeEventBatchBuilder &);
  flatbuffers::Offset<OutcomeEventBatch> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OutcomeEventBatch>(end);
    return o;
  }
};

inline flatbuffers::Offset<OutcomeEventBatch> CreateOutcomeEventBatch(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<OutcomeEvent>>> Events = 0) {
  OutcomeEventBatchBuilder builder_(_fbb);
  builder_.add_Events(Events);
  return builder_.Finish();
}

inline flatbuffers::Offset<OutcomeEventBatch> CreateOutcomeEventBatchDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<OutcomeEvent>> *Events = nullptr) {
  return VW::Events::CreateOutcomeEventBatch(
      _fbb,
      Events ? _fbb.CreateVector<flatbuffers::Offset<OutcomeEvent>>(*Events) : 0);
}

}  // namespace Events
}  // namespace VW

#endif  // FLATBUFFERS_GENERATED_OUTCOMEEVENT_VW_EVENTS_H_
